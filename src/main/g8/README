g8 for jamming together a play20 app
=====================================

One challenge with scala is the proliferation of dsl's to automagically configure things, and finding the best lib to accomplish a goal (that is compiled for this version of scala, as a release, and available via sbt).

Here is my current best guess at a robust toolchain to quickstart. Copy this directory,  run "g8 rosco5/quickplay", or run "play new"

The default settings for this project are
- curl https://raw.github.com/paulp/sbt-extras/master/sbt > ~/bin/sbt
- configure build.sbt to build sbt with 2.10.0-RC1
- configure build.properties to use sbt 0.12.1
- setup some standard libs & repositories in Build.scala
- include useful sbt plugins for graphPlugin, sbtPlugin, eclispePlugin

Ways to run the app:
- via sbt: sbt clean update compile stage dist run 
-- set offline := true
- via Play20: play run
- via Procfile: gem install foreman && foreman start
- deploy to heroku

Some useful heroku commands:
git init . && git add . && git commit -m "init" && heroku create  --buildpack https://github.com/blendlabs/heroku-buildpack-scala && git push heroku master
heroku config:add JAVA_OPTS='-Xms384m -Xmx384m -Xss1M -XX:MaxPermSize=512M -XX:+UseCompressedOops -javaagent:heroku-javaagent-1.2.jar=stdout=true -XX:+PrintGCDetails -XX:+PrintHeapAtGC -XX:+PrintGCDateStamps  -XX:+CMSClassUnloadingEnabled'
heroku config:add SBT_OPTS='-Xms384m -Xmx384m -Xss1M -XX:MaxPermSize=512M -XX:+UseCompressedOops -javaagent:heroku-javaagent-1.2.jar=stdout=true -XX:+PrintGCDetails -XX:+PrintHeapAtGC -XX:+PrintGCDateStamps  -XX:+CMSClassUnloadingEnabled'
heroku config:add BUILDPACK_URL=https://github.com/blendlabs/heroku-buildpack-scala
test buildpack locally: https://github.com/heroku/buildkits && heroku build -b ~/src/heroku-buildpack-scala
debugging: http://mikeslinn.blogspot.com/2012/09/debugging-jvm-programs-on-heroku.html

Some userful sites:
http://ls.implicit.ly/
